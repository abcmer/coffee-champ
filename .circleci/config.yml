version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Grab cert
          command: scp $DROPLET_USER@$DROPLET_HOST:/etc/letsencrypt/live/coffeechamp.dev/server.p12 /src/main/resource/keys/
      - run:
          name: Build docker image on local
          command: sbt docker:publishLocal
      - run:
          name: Push docker image
          command: |
            docker login --username $HUB_USERNAME --password $HUB_PASSWORD &&
            docker tag coffee-champ:0.1 smort/coffee-champ:latest &&
            docker tag smort/coffee-champ:latest smort/coffee-champ:$CIRCLE_BUILD_NUM &&
            docker push smort/coffee-champ
  test:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          key: scala-library-dependencies-{{ checksum "build.sbt" }}
      - run:
          name: Test app compiles
          command: sbt test:compile
      - save_cache:
          paths: [ "~/.m2", "~/.ivy2", "~/.cache/coursier" ]
          key: scala-library-dependencies-{{ checksum "build.sbt" }}
      - run:
          name: Run scala tests
          command: sbt test
  deploy:
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: Get Contents
          command: pwd && ls -la
      - run:
          name: Deploy Web
          command: scp ./web/index.html $DROPLET_USER@$DROPLET_HOST:/srv/www/coffeechamp.dev/
      - run:
          name: Deploy Server
          command: |
            ssh -v $DROPLET_USER@$DROPLET_HOST "docker stop coffee-champ && docker rm coffee-champ && docker rmi -f smort/coffee-champ && docker login --username $HUB_USERNAME --password $HUB_PASSWORD && docker pull smort/coffee-champ:latest && docker run -e CERT_PASSWORD=$CERT_PASSWORD -e HOST=$API_HOST -e PORT=$API_PORT -p 8080:8080 --name coffee-champ -d smort/coffee-champ:latest"

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
